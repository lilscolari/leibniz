Leibniz {
  Program = Stmt+

  Stmt = FuncCreation
       | ForLoop
       | PrintStmt
       | VarDec
       | IfStmt
       | ObjectCreation
       | CircleCreation
       | AssignmentStmt
       | id "++;" --increment  
       

  VarDec = let id "=" Exp ";"
  PrintStmt = print "(" Exp ");"
  IfStmt = if Exp Block (else (Block | IfStmt))?
  AssignmentStmt = id "=" Exp ";"
  Block = "{" Stmt+ "}"
  
  ForLoop = for id in domain "(" numeral ")" Block

  Exp = Condition relop Condition --test
      | Condition
  Condition = Exp "+" Term --add
            | Exp "-" Term --sub
            | Term
  Term = Term "*" Factor --mul
       | Term "/" Factor --div
       | Term "%" Factor --mod
       | Factor
  Factor = Primary ("**" Factor)? --exp
         | "-" Primary --neg
         | Primary
  Primary = numeral
          | boolean
          | ObjectCall
          | CircleCall
          | stringlit
          | id
          | FunctionCall
          | "[" ListOf<Exp, ","> "]" --array
          | "(" Exp ")" --parens

  boolean = "true" | "false"

  ExpList = ListOf<Exp, ",">
  
  FunctionCall = (cos | sin | tan | arccos | arcsin | arctan | sqrt | log | distance) "(" ExpList? ")"
  
  FuncCreation = func id "(" ExpList? ")" Block
  
  NumeralList = numeral (", " | ",") numeral
  
  NonCircleMethod = (area | perimeter) "(" NumeralList ")"
  CircleMethod = (area | circumference) "(" NumeralList ")"
  
  Object = Triangle | Rectangle
  ObjectCreation = obj id "=" Object ";"
  ObjectCall = Object "." NonCircleMethod
  CircleObject = Circle
  CircleCreation = obj id "=" CircleObject ";"
  CircleCall = CircleObject "." CircleMethod

  print = "print" ~idchar
  if = "if" ~idchar
  else = "else" ~idchar
  let = "let" ~idchar
  
  func = "func" ~idchar
  
  for = "for" ~idchar
  in = "in" ~idchar
  domain = "domain" ~idchar
  
  obj = "obj" ~idchar

  Triangle = "Triangle" ~idchar
  Rectangle = "Rectangle" ~idchar
  Circle = "Circle" ~idchar
  
  area = "area" ~idchar
  perimeter = "perimeter" ~idchar
  circumference = "circumference" ~idchar

  cos = "cos" ~idchar
  sin = "sin" ~idchar
  tan = "tan" ~idchar
  arccos = "arccos" ~idchar
  arcsin = "arcsin" ~idchar
  arctan = "arctan" ~idchar
  sqrt = "sqrt" ~idchar
  log = "log" ~idchar
  e = "e" ~idchar
  pi = "pi" ~idchar
  distance = "distance" ~idchar

  keyword = print | if | else | let | obj | e | pi | distance | for | in | domain | func
           | cos | sin | tan | arccos | arcsin | arctan | sqrt | log | area | perimeter | circumference
           
  id = ~keyword letter idchar*
  idchar = letter | digit | "_"
  numeral = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  stringlit = "\"" (~"\"" any)* "\""
  
  relop = "<=" | "<" | "==" | "!=" | ">=" | ">"
  
  space += "//" (~"\n" any)* --comment
}