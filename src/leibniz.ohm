Leibniz {
  Program   = Stmt+
  Stmt      = VarDec
            | FunDec
            | PrintStmt
            | WhileStmt
            | IfStmt
            | break ";"                       --break
            | AssignmentStmt
            | "++" Primary_id ";"             --increment
  VarDec    = (let | const) id ":" Type "=" Exp ";"
  FunDec    = fnc id Params ":" Type "=" Exp ";"
  Params    = "(" ListOf<Param, ","> ")"
  Param     = id ":" Type
  Type      = Type "[]"                       --array
            | "number"                        --number 
            | "integer"                       --integer
            | "float"                         --float
            | "boolean"                       --boolean
            | "string"                        --string
  PrintStmt = print Exp ";"
  AssignmentStmt = Primary_id "=" Exp ";"
  IfStmt    = if Exp Block (else (Block | IfStmt))?
  WhileStmt = while Exp Block
  Block     = "{" Stmt* "}"
  
  Exp       = Condition relop Condition  --test
            | Condition
  Condition = Exp "+" Term               --add
            | Exp "-" Term               --sub
            | Term
  Term      = Term "*" Factor            --mul
            | Term "/" Factor            --div
            | Term "%" Factor            --mod
            | Factor
  Factor    = Primary "**" Factor        --exp
            | "-" Primary                --neg
            | "!" Primary                --not
            | "#" Primary                --len
            | Primary
  Primary   = floatlit                   --float
            | intlit                     --int
            | true                       --true
            | false                      --false
            | stringlit                  --string
            | Primary "[" Exp "]"        --subscript
            | MathFuncCall               --mathfunc
            | id                         --id
            | "[" ListOf<Exp, ","> "]"   --array
            | "(" Exp ")"                --parens
  

  MathFuncCall = TrigFunc "(" Exp ")"            --trig
               | BinaryMathFunc "(" Exp "," Exp ")"  --binary
               | UnaryMathFunc "(" Exp ")"       --unary
  
  TrigFunc   = cosFunc | sinFunc | tanFunc 
             | arccosFunc | arcsinFunc | arctanFunc
             
  UnaryMathFunc = sqrtFunc | expFunc | lnFunc | log10Func 
                | absFunc | floorFunc | ceilFunc | roundFunc
                
  BinaryMathFunc = minFunc | maxFunc | powFunc
  
  let       = "let" ~idchar
  const     = "const" ~idchar
  fnc       = "fnc" ~idchar
  print     = "print" ~idchar
  while     = "while" ~idchar
  if        = "if" ~idchar
  else      = "else" ~idchar
  break     = "break" ~idchar
  true      = "true" ~idchar
  false     = "false" ~idchar
  
  // Math functions
  cosFunc = "cos" ~idchar
  sinFunc = "sin" ~idchar
  tanFunc = "tan" ~idchar
  arccosFunc = "arccos" ~idchar
  arcsinFunc = "arcsin" ~idchar
  arctanFunc = "arctan" ~idchar
  sqrtFunc = "sqrt" ~idchar
  expFunc = "exp" ~idchar
  lnFunc = "ln" ~idchar
  log10Func = "log10" ~idchar
  absFunc = "abs" ~idchar
  floorFunc = "floor" ~idchar
  ceilFunc = "ceil" ~idchar
  roundFunc = "round" ~idchar
  minFunc = "min" ~idchar
  maxFunc = "max" ~idchar
  powFunc = "pow" ~idchar
  
  keyword   = let | const | fnc | print | while | if | else
            | break | true | false | cosFunc | sinFunc | tanFunc
            | arccosFunc | arcsinFunc | arctanFunc | sqrtFunc
            | expFunc | lnFunc | log10Func | absFunc | floorFunc
            | ceilFunc | roundFunc | minFunc | maxFunc | powFunc
            
  id        = ~keyword letter idchar*
  idchar    = letter | digit | "_"
  intlit    = digit+
  floatlit  = digit+ "." digit+ (("E"|"e") ("+"|"-")? digit+)?
  stringlit = "\"" (~"\"" any)* "\""
  relop     = "<=" | "<" | "==" | "!=" | ">=" | ">"
  space    += "//" (~"\n" any)*          --comment
}