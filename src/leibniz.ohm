Leibniz {
  Program   = Stmt+
  Stmt      = VarDec
            | FunDec
            | ForLoop
            | PrintStmt
            | WhileStmt
            | IfStmt
            | ReturnStatement
            | break ";"                       --break
            | ObjectCreation
            | AssignmentStmt
            | ArrayIndexAssignment
            | "++" Primary_id ";"             --increment
            | "--" Primary_id ";"             --decrement
  ForLoop = for id in domain DomainArgs Block
  DomainArgs = "(" ExpList ")"
  forInteger = digit+          
  for = "for" ~idchar
  in = "in" ~idchar
  domain = "domain" ~idchar
  VarDec    = (let | const) id ":" Type "=" Exp ";"
  FunDec    = fnc id Params ":" Type "=" FuncBody
  FuncBody = "{" Stmt* (ReturnStatement)? "}"
  ReturnStatement = "return" Exp? ";"
  FunctionCall = id "(" ExpList ")"
  Params    = "(" ListOf<Param, ","> ")"
  Param     = id ":" Type
  Type      = Type "[]"                       --array
            | "matrix"                        --matrix
            | "number"                        --number 
            | "integer"                       --integer
            | "float"                         --float
            | "boolean"                       --boolean
            | "string"                        --string
            | "void"                          --void
            
  PrintStmt = print "(" Exp ")" ";"
  AssignmentStmt = Primary_id "=" Exp ";"
  ArrayIndexAssignment = Primary_subscript "=" Exp ";"
  IfStmt    = if Exp Block (else (Block | IfStmt))?
  WhileStmt = while Exp Block
  Block     = "{" Stmt* "}"
  
  Exp       = Condition relop Condition  --test
            | Condition
  Condition = Exp "+" Term               --add
            | Exp "-" Term               --sub
            | Term
  Term      = Term "*" Factor            --mul
            | Term "/" Factor            --div
            | Term "%" Factor            --mod
            | Factor
  Factor    = Primary "**" Factor        --exp
            | "-" Primary                --neg
            | "!" Primary                --not
            | "#" Primary                --len
            | Primary
  Primary   = floatlit                   --float
            | intlit                     --int
            | true                       --true
            | false                      --false
            | ObjectMethodCall
            | ArrayMethodCall
            | stringlit                  --string
            | Primary "[" Exp "]"        --subscript
            | MathFuncCall               --mathfunc
            | FunctionCall
            | DerivativeFuncCall
            | mathConstant
            | id                         --id
            | "[" ListOf<Exp, ","> "]"   --array
            | "(" Exp ")"                --parens
  
  ArrayMethodCall = Primary "." arrayMethod "(" id ":" Type "=>" Exp ")" --higherorder
                  | Primary "." arrayMethod "(" Exp ")"                  --simple

  arrayMethod = mapMethod | filterMethod
  mapMethod = "map" ~idchar
  filterMethod = "filter" ~idchar
  
  MathFuncCall = TrigFunc "(" Exp ")"            --trig
               | BinaryMathFunc "(" Exp "," Exp ")"  --binary
               | UnaryMathFunc "(" Exp ")"       --unary

  DerivativeFuncCall = derivativeFunction "(" stringlit ", " stringlit ", " (floatlit | intlit) ")"

  TrigFunc   = cosFunc | sinFunc | tanFunc 
             | arccosFunc | arcsinFunc | arctanFunc
  
  UnaryMathFunc = sqrtFunc | expFunc | lnFunc | log10Func 
                | absFunc | floorFunc | ceilFunc | roundFunc | toStringFunc
                | medianFunc | meanFunc | sortFunc | modeFunc | minFunc | maxFunc | prodFunc | sumFunc | stdFunc | varFunc
                | zetaFunc | arandomFunc

  toStringFunc = "str" ~idchar
                
  BinaryMathFunc = powFunc | permFunc | chooseFunc | randFunc | randintFunc
  
  let       = "let" ~idchar
  const     = "const" ~idchar
  fnc       = "fnc" ~idchar
  print     = "print" ~idchar
  while     = "while" ~idchar
  if        = "if" ~idchar
  else      = "else" ~idchar
  break     = "break" ~idchar
  true      = "true" ~idchar
  false     = "false" ~idchar
  void      = "void" ~idchar
  
  cosFunc = "cos" ~idchar
  sinFunc = "sin" ~idchar
  tanFunc = "tan" ~idchar
  arccosFunc = "arccos" ~idchar
  arcsinFunc = "arcsin" ~idchar
  arctanFunc = "arctan" ~idchar
  sqrtFunc = "sqrt" ~idchar
  expFunc = "exp" ~idchar
  lnFunc = "ln" ~idchar
  log10Func = "log10" ~idchar
  absFunc = "abs" ~idchar
  floorFunc = "floor" ~idchar
  ceilFunc = "ceil" ~idchar
  roundFunc = "round" ~idchar
  powFunc = "pow" ~idchar
  derivativeFunction = "derivative" ~idchar
  medianFunc = "median" ~idchar
  meanFunc = "mean" ~idchar
  sortFunc = "sort" ~idchar
  modeFunc = "mode" ~idchar
  minFunc = "min" ~idchar
  maxFunc = "max" ~idchar
  prodFunc = "prod" ~idchar
  sumFunc = "sum" ~idchar
  stdFunc = "std" ~idchar
  varFunc = "variance" ~idchar
  zetaFunc = "zeta" ~idchar
  arandomFunc = "arandom" ~idchar
  permFunc = "perm" ~idchar
  chooseFunc = "choose" ~idchar
  randFunc = "rand" ~idchar
  randintFunc = "randint" ~idchar

  mathConstant = piConst | eConst | piSymbol
  piConst = "pi" ~idchar
  eConst = "e" ~idchar
  piSymbol = "Ï€" ~idchar

  VarArgsList = Exp ("," Exp)*

  ExpList = ListOf<Exp, ",">

  ObjectCreation = obj id "=" objectType "(" ExpList ")" ";"

  objectType = triangleObj | rectangleObj | circleObj
  
  ObjectMethodCall = id "." methodName "(" ")"
  
  // Calls directly to objects
  StaticMethodCall = (triangleObj | rectangleObj | circleObj) "." methodName "(" VarArgsList? ")"
  
  methodName = areaMethod | perimeterMethod | circumferenceMethod | radiusMethod

  triangleObj = "Triangle" ~idchar
  rectangleObj = "Rectangle" ~idchar
  circleObj = "Circle" ~idchar

  areaMethod = "area" ~idchar
  perimeterMethod = "perimeter" ~idchar
  circumferenceMethod = "circumference" ~idchar
  radiusMethod = "radius" ~idchar

  obj = "obj" ~idchar
  
  keyword   = let | const | fnc | print | while | if | else
            | break | true | false | cosFunc | sinFunc | tanFunc
            | arccosFunc | arcsinFunc | arctanFunc | sqrtFunc
            | expFunc | lnFunc | log10Func | absFunc | floorFunc
            | ceilFunc | roundFunc | powFunc
            | triangleObj | rectangleObj | circleObj
            | domain | for | in | obj | derivativeFunction
            | piConst | eConst | medianFunc | meanFunc | sortFunc
            | modeFunc | minFunc | maxFunc | prodFunc | sumFunc | stdFunc | varFunc
            | mapMethod | filterMethod | void | zetaFunc | arandomFunc
            | permFunc | chooseFunc | randFunc | randintFunc

  id        = ~keyword letter idchar*
  idchar    = letter | digit | "_"
  intlit    = ("-")? digit+
  floatlit  = ("-")? digit+ "." digit+ (("E"|"e") ("+"|"-")? digit+)?
  stringlit = "\"" (~"\"" any)* "\""
  relop     = "<=" | "<" | "==" | "!=" | ">=" | ">"
  space    += "//" (~"\n" any)*          --comment
}