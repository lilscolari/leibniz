let x: integer[] = [3, 2, 1, 10, 4, 3, 6];

print(sort(x));
print(mean(x));
print(median(x));
print(mode(x));
print(min(x));
print(max(x));
print(prod(x));
print(sum(x));
print(std(x));
print(variance(x));

const sorted: integer[] = sort(x);

for x in domain(#sorted) {
    sorted[x] = 1;
    print(sorted[x]);
}

print(sorted);

sorted[3] = 10;

print(sorted[5] * 3);

print(sorted);

// test filter, map, and void

let m: matrix = [[1, 0], [0, 1]];

let m2: matrix = [[pi, 5.23], [42, pow(2, 3)]];

print(m);

print(m2);

print(derivative("x^3", "x", 5));

//print(m[1]);

m2 = [[1]];

print(m[0]);

print(m2[0][0] / 37);

let big_m: matrix = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]];

print(big_m[2][2] * pi);

print(zeta(3));

const ITERATIONS: integer = 100;

let a: integer[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

for i in domain(ITERATIONS) {
    print(arandom(a));
}

print(choose(7, 5));
print(perm(5, 3));

for i in domain(ITERATIONS) {
    print(rand(0, 100));
    print(randint(0, 100));
}

fnc greater_than_2(i: integer): boolean = {
    if i > 2 {
        return true;
    }
    return false;
}

fnc multiply_by_2(i: integer): integer = {
    return i * 2;
}

let test: integer[] = [1, 2, 3, 4, 5, 6, 7];

//(" id ":" Type "=>" Exp ")"

let name: integer[] = test.filter(x: integer => greater_than_2);
let name2: integer[] = test.map(x: integer => multiply_by_2);

print(name);
print(name2);

let name3: integer[] = test.filter(greater_than_2);
print(name3);


let threeby3: matrix = [
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1]];

print(column(threeby3, 1));
print(count(threeby3));
print(count("test"));
threeby3[1][1] = 5;
print(threeby3);
print(cross([1, 1, 0], [0, 1, 1]));
print(det([[1, 2], [3, 4]]));
print(diag([1, 2, 3]));
const a_matrix: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
print(diag(a_matrix));
print(dot([1, 2, 3], [2, 3, 4]));
print(eigs([[1, 0], [0, 1]]));
print(identity(4));
print(inv([[1, 2], [3, 4]]));
print(ones(7));
print(zeros(8));
print(arange(5, 10));
print(transpose([[1, 2, 3], [4, 5, 6]]));
print(shape([[1, 2, 3], [4, 5, 6]]));